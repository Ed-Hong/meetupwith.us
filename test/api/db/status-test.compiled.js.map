{"version":3,"sources":["status-test.es6"],"names":["status","describe","attributes","available","descrip","beforeEach","console","log","it","stat","create","description","availability","equal","findOne","e","_id","findOneAndUpdate"],"mappings":";;;;AACA;;IAAYA,M;;AACZ;;AACA;;;;;;;;AAEAC,SAAS,eAAT,EAA0B,MAAM;AAC9B,QAAMC,aAAa;AACjBC,eAAW,IADM;AAEjBC,aAAS,cAFQ,CAEO;AAFP,GAAnB;AAIAC,sCAAW,aAAY;AACrBC,YAAQC,GAAR,CAAY,UAAZ;AACA,UAAM,mBAAN;AACD,GAHD;;AAKAN,WAAS,WAAT,EAAsB,MAAM;AACzBO,OAAG,4DAAH,2BAAiE,aAAY;AAC5E,YAAMC,OAAO,MAAMT,OAAOU,MAAP,CAAc,EAACC,aAAaT,WAAWE,OAAzB;AAC/BQ,sBAAcV,WAAWC,SADM,EAAd,CAAnB;AAEA,uBAAOU,KAAP,CAAaJ,KAAKE,WAAlB,EAA+BT,WAAWE,OAA1C;AACA,uBAAOS,KAAP,CAAaJ,KAAKG,YAAlB,EAAgCV,WAAWC,SAA3C;AACD,KALA;AAMF,GAPD;;AASAF,WAAS,YAAT,EAAuB,MAAM;AAC3BO,OAAG,gDAAH,2BAAqD,aAAY;AAC7D,UAAG;AACD,cAAMR,OAAOc,OAAP,CAAe,EAACH,aAAa,cAAd,EAAf,CAAN;AAED,OAHD,CAGE,OAAMI,CAAN,EAAS;AAAE;AAAQ;AACrB,4BAAO,KAAP;AACH,KAND;;AAQAP,OAAG,wDAAH,2BAA6D,aAAY;AACvE,YAAMR,OAAOU,MAAP,CAAc,EAACC,aAAaT,WAAWE,OAAzB;AAClBQ,sBAAcV,WAAWC,SADP,EAAd,CAAN;AAEA,YAAMH,OAAOU,MAAP,CAAc,EAACC,aAAa,UAAd;AAClBC,sBAAc,KADI,EAAd,CAAN;AAEA,UAAI;AACF,cAAME,QAAQ,EAACH,aAAa,eAAd,EAAR,CAAN;AACD,OAFD,CAEE,OAAOI,CAAP,EAAU;AACV;AACD,OAAC,sBAAO,KAAP;AACH,KAVD;;AAYAP,OAAG,kDAAH,2BAAuD,aAAY;AAAA,kBACnD,MAAMR,OAAOU,MAAP,CAAc,EAACC,aAAaT,WAAWE,OAAzB;AAChCQ,sBAAcV,WAAWC,SADO,EAAd,CAD6C;;AAAA,YAC1Da,GAD0D,SAC1DA,GAD0D;;AAGjE,YAAMP,OAAO,MAAMT,OAAOc,OAAP,CAAeE,GAAf,CAAnB;AACA,uBAAOH,KAAP,CAAaJ,KAAKE,WAAlB,EAA+BT,WAAWE,OAA1C;AACA,uBAAOS,KAAP,CAAaJ,KAAKG,YAAlB,EAAgCV,WAAWC,SAA3C;AACD,KAND;AAOD,GA5BD;;AA8BAF,WAAS,qBAAT,EAAgC,MAAM;AACpCO,OAAG,qEAAH,2BAA0E,aAAY;AACpF,UAAI;AACF,cAAMR,OAAOiB,gBAAP,CAAwB,EAACL,cAAc,IAAf,EAAxB,EAA8C,EAACD,aAAa,UAAd;AAClDC,wBAAc,KADoC,EAA9C,CAAN;AAED,OAHD,CAGE,OAAOG,CAAP,EAAU;AAAE;AAAQ;AACtB,4BAAO,KAAP;AACD,KAND;;AAQAP,OAAG,qDAAH,2BAA0D,aAAY;AAAA,kBACtD,MAAMR,OAAOU,MAAP,CAAc,EAACC,aAAaT,WAAWE,OAAzB;AAChCQ,sBAAcV,WAAWC,SADO,EAAd,CADgD;;AAAA,YAC7Da,GAD6D,SAC7DA,GAD6D;;AAGpE,YAAMP,OAAO,MAAMT,OAAOiB,gBAAP,CAAwBD,GAAxB,EAA6B,EAACL,aAAa,UAAd;AAC9CC,sBAAc,KADgC,EAA7B,CAAnB;AAEA,uBAAOC,KAAP,CAAaJ,KAAKE,WAAlB,EAA+B,QAA/B;AACA,uBAAOE,KAAP,CAAaJ,KAAKG,YAAlB,EAAgC,KAAhC;AACD,KAPD;AAQD,GAjBD;AAmBD,CApED,E,CALA","file":"status-test.es6","sourcesContent":["// created by apoovey 12-26-16\nimport * as status from '../../../api/db/status.es6';\nimport {clear} from '../../../models/mongo/index.es6';\nimport assert from 'assert';\n\ndescribe('Status DB API', () => {\n  const attributes = {\n    available: true,\n    descrip: \"Hello World!\" // eslint-disable-line\n  };\n  beforeEach(async () => {\n    console.log('clearing');\n    await clear();\n  });\n\n  describe('#create()', () => {\n     it('should create a Status object with attributes successfully', async () => {\n      const stat = await status.create({description: attributes.descrip,\n        availability: attributes.available});\n      assert.equal(stat.description, attributes.descrip);\n      assert.equal(stat.availability, attributes.available);\n    });\n  });\n\n  describe('#findOne()', () => {\n    it('should fail to find an uncreated Status object', async () => {\n        try{\n          await status.findOne({description: \"Hello World!\"});\n\n        } catch(e) { return;}\n        assert(false);\n    });\n\n    it('should fail to find a Status object when several exist', async () => {\n      await status.create({description: attributes.descrip,\n        availability: attributes.available});\n      await status.create({description: \"studying\",\n        availability: false});\n      try {\n        await findOne({description: \"goodbye world\"});\n      } catch (e) {\n        return;\n      } assert(false);\n    });\n\n    it('should find a created Status object successfully', async () => {\n      const {_id} = await status.create({description: attributes.descrip,\n        availability: attributes.available});\n      const stat = await status.findOne(_id);\n      assert.equal(stat.description, attributes.descrip);\n      assert.equal(stat.availability, attributes.available);\n    });\n  });\n\n  describe('#findOneAndUpdate()', () => {\n    it('should failt to find and update a Status object that does not exist', async () => {\n      try {\n        await status.findOneAndUpdate({availability: true}, {description: \"studying\",\n          availability: false});\n      } catch (e) { return;}\n      assert(false);\n    });\n\n    it('should find and update a Status object successfully', async () => {\n      const {_id} = await status.create({description: attributes.descrip,\n        availability: attributes.available});\n      const stat = await status.findOneAndUpdate(_id, {description: \"studying\",\n        availability: false});\n      assert.equal(stat.description, \"potato\");\n      assert.equal(stat.availability, false);\n    });\n  });\n\n});\n"]}